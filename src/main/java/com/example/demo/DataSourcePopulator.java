package com.example.demo;

import javax.sql.DataSource;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.acls.domain.BasePermission;
import org.springframework.security.acls.domain.ObjectIdentityImpl;
import org.springframework.security.acls.domain.PrincipalSid;
import org.springframework.security.acls.model.MutableAclService;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.transaction.support.TransactionTemplate;

@Component
public class DataSourcePopulator implements InitializingBean {

  private JdbcTemplate template;
  private MutableAclService mutableAclService;
  private TransactionTemplate tt;

  public DataSourcePopulator(
      DataSource dataSource, MutableAclService mutableAclService, TransactionTemplate tt) {
    this.template = new JdbcTemplate(dataSource);
    this.mutableAclService = mutableAclService;
    this.tt = tt;
  }

  public void afterPropertiesSet() {
    this.template.execute("DROP TABLE ACL_ENTRY");
    this.template.execute("DROP TABLE ACL_OBJECT_IDENTITY");
    this.template.execute("DROP TABLE ACL_CLASS");
    this.template.execute("DROP TABLE ACL_SID");

    var authorities = AuthorityUtils.createAuthorityList("ROLE_IGNORED");
    var authRequest = new UsernamePasswordAuthenticationToken("rod", "koala", authorities);
    SecurityContextHolder.getContext().setAuthentication(authRequest);

    // ACL Schema
    // https://docs.spring.io/spring-security/reference/servlet/appendix/database-schema.html#_postgresql

    this.template.execute(
        """
                create table acl_sid(
                        id bigserial not null primary key,
                        principal boolean not null,
                        sid varchar(100) not null,
                        constraint unique_uk_1 unique(sid,principal)
                );
        """);

    this.template.execute(
        """
                create table acl_class(
                        id bigserial not null primary key,
                        class varchar(100) not null,
                        constraint unique_uk_2 unique(class)
                );
        """);

    this.template.execute(
        """
                create table acl_object_identity(
                        id bigserial primary key,
                        object_id_class bigint not null,
                        object_id_identity varchar(36) not null,
                        parent_object bigint,
                        owner_sid bigint,
                        entries_inheriting boolean not null,
                        constraint unique_uk_3 unique(object_id_class,object_id_identity),
                        constraint foreign_fk_1 foreign key(parent_object)references acl_object_identity(id),
                        constraint foreign_fk_2 foreign key(object_id_class)references acl_class(id),
                        constraint foreign_fk_3 foreign key(owner_sid)references acl_sid(id)
                );
        """);

    this.template.execute(
        """
                create table acl_entry(
                        id bigserial primary key,
                        acl_object_identity bigint not null,
                        ace_order int not null,
                        sid bigint not null,
                        mask integer not null,
                        granting boolean not null,
                        audit_success boolean not null,
                        audit_failure boolean not null,
                        constraint unique_uk_4 unique(acl_object_identity,ace_order),
                        constraint foreign_fk_4 foreign key(acl_object_identity) references acl_object_identity(id),
                        constraint foreign_fk_5 foreign key(sid) references acl_sid(id)
                );
        """);

    var contact = new Contact();
    contact.setName("John Doe");
    contact.setId(1L);
    var objectIdentity = new ObjectIdentityImpl(contact);

    tt.execute(
        status -> {
          var acl = mutableAclService.createAcl(objectIdentity);
          var sid = new PrincipalSid("john");
          acl.insertAce(acl.getEntries().size(), BasePermission.READ, sid, true);
          mutableAclService.updateAcl(acl);
          return null;
        });
  }
}

    //     this.template.execute(
    //         """
    //                 CREATE TABLE ACL_SID(
    //                         ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL
    // PRIMARY KEY,
    //                         PRINCIPAL BOOLEAN NOT NULL,
    //                         SID TEXT NOT NULL,
    //                         CONSTRAINT UNIQUE_UK_1 UNIQUE(SID,PRINCIPAL)
    //                 );
    //         """);

//     this.template.execute(
    //         """
    //                 CREATE TABLE ACL_CLASS(
    //                         ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL
    // PRIMARY KEY,
    //                         CLASS TEXT NOT NULL,
    //                         CONSTRAINT UNIQUE_UK_2 UNIQUE(CLASS)
    //                 );
    //         """);

        //     this.template.execute(
    //         """
    //                 CREATE TABLE ACL_OBJECT_IDENTITY(
    //                         ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL
    // PRIMARY KEY,
    //                         OBJECT_ID_CLASS BIGINT NOT NULL,
    //                         OBJECT_ID_IDENTITY TEXT NOT NULL,
    //                         PARENT_OBJECT BIGINT,
    //                         OWNER_SID BIGINT,
    //                         ENTRIES_INHERITING BOOLEAN NOT NULL,
    //                         CONSTRAINT UNIQUE_UK_3 UNIQUE(OBJECT_ID_CLASS,OBJECT_ID_IDENTITY),
    //                         CONSTRAINT FOREIGN_FK_1 FOREIGN KEY(PARENT_OBJECT)REFERENCES
    // ACL_OBJECT_IDENTITY(ID),
    //                         CONSTRAINT FOREIGN_FK_2 FOREIGN KEY(OBJECT_ID_CLASS)REFERENCES
    // ACL_CLASS(ID),
    //                         CONSTRAINT FOREIGN_FK_3 FOREIGN KEY(OWNER_SID)REFERENCES ACL_SID(ID)
    //                 );
    //         """);

        //     this.template.execute(
    //         """
    //                 CREATE TABLE ACL_ENTRY(
    //                         ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL
    // PRIMARY KEY,
    //                         ACL_OBJECT_IDENTITY BIGINT NOT NULL,
    //                         ACE_ORDER INT NOT NULL,
    //                         SID BIGINT NOT NULL,
    //                         MASK INTEGER NOT NULL,
    //                         GRANTING BOOLEAN NOT NULL,
    //                         AUDIT_SUCCESS BOOLEAN NOT NULL,
    //                         AUDIT_FAILURE BOOLEAN NOT NULL,
    //                         CONSTRAINT UNIQUE_UK_4 UNIQUE(ACL_OBJECT_IDENTITY,ACE_ORDER),
    //                         CONSTRAINT FOREIGN_FK_4 FOREIGN KEY(ACL_OBJECT_IDENTITY) REFERENCES
    // ACL_OBJECT_IDENTITY(ID),
    //                         CONSTRAINT FOREIGN_FK_5 FOREIGN KEY(SID) REFERENCES ACL_SID(ID)
    //                 );
    //         """);
